* Emacs config

** Basic

Some very basic settings that tweak the UI.

#+BEGIN_SRC emacs-lisp
  (column-number-mode)            ;; column number display in the mode line
  (menu-bar-mode -1)              ;; no menu bar
  (scroll-bar-mode -1)            ;; no scroll bar
  (tool-bar-mode -1)              ;; no tool bar
  (setq inhibit-startup-screen t) ;; no startup screen
  (fringe-mode 4)                 ;; 4px padding on each frame
#+END_SRC

** Package Manager

Native ~use-package~ is used as package manager.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

Install packages directly from source using ~quelpa~ and its integration for ~use-package~.

#+BEGIN_SRC emacs-lisp
  (use-package quelpa
    :ensure t)
  (use-package quelpa-use-package
    :after quelpa
    :ensure t)
#+END_SRC

Automatically update packages every 7 days, and delete old versions.

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :custom 
    (auto-package-update-interval 7)            ;; period between updates is 7 days
    (auto-package-update-delete-old-versions t) ;; old versions of updated packages are removed
    :config
    (auto-package-update-maybe))                ;; updates are automatically made according to the interval
#+END_SRC

** Help and Documentation

Default ~*Help*~ buffer is quite poor and gets enriched using ~helpful~.

| Key sequence | Function           | Description                                                     |
|--------------+--------------------+-----------------------------------------------------------------|
| ~C-h c~      | ~describe-char~    | Show description of the char at point                           |
| ~C-h F~      | ~describe-face~    | Show description of a face                                      |
| ~C-h v~      | ~helpful-variable~ | Show documentation of a variable                                |
| ~C-h f~      | ~helpful-function~ | Show documentation of a function                                |
| ~C-h s~      | ~helpful-symbol~   | Show documentation of a symbol                                  |
| ~C-h k~      | ~helpful-key~      | Show documentation of a function associated with a key sequence |

#+BEGIN_SRC emacs-lisp
  (setq eldoc-echo-area-prefer-doc-buffer t) ;; documentation is displayed in ElDoc buffer, if available

  (use-package helpful
    :ensure t
    :bind
    ("C-h c" . describe-char)
    ("C-h F" . describe-face)
    ("C-h v" . helpful-variable)
    ("C-h f" . helpful-function)
    ("C-h s" . helpful-symbol)
    ("C-h k" . helpful-key))
#+END_SRC

** Terminal emulator

I use ~eat~ as my terminal emulator inside Emacs, integrated with ~bash~:

#+BEGIN_SRC emacs-lisp
  (use-package eat
    :ensure t
    :bind
    ("C-x p t" . eat-project))
#+END_SRC

Inside ~.bashrc~:

#+BEGIN_SRC sh
  # Enable colored prompt for 'eat'
  if [ "$TERM" = eat-truecolor ]; then
      color_prompt=yes;
  fi

  # Enable 'eat' shell integration
  [ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
      source "$EAT_SHELL_INTEGRATION_DIR/bash"
#+END_SRC

** Key Completion

Package ~which-key~ displays key sequence completion of an already typed prefix.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    :custom
    (which-key-popup-type 'minibuffer))
#+END_SRC

** Theme & Fonts

Custom theme and fonts. Note that fonts must be installed at the system level before Emacs can use them.

#+BEGIN_SRC sh
  apt install fonts-dejavu
#+END_SRC

Load my theme and icons to make them available for other packages.

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :config (modus-themes-select 'modus-operandi-tinted))

  (use-package all-the-icons
    :ensure t
    :if (or (display-graphic-p) (daemonp))
    :init
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))

  (defun ht/set-faces (&optional frame)
    (set-face-attribute 'default nil :font "DejaVu Sans Mono-8")
    (set-face-attribute 'fixed-pitch nil :font "CMU Typewriter Text")
    (set-face-attribute 'variable-pitch nil :font "CMU Sans Serif" :height 100))
  (add-hook 'after-make-frame-functions #'ht/set-faces)
  (ht/set-faces)
#+END_SRC

Compilation mode in Emacs will not show colors by default.

#+BEGIN_SRC emacs-lisp
  (use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter))
#+END_SRC

** File Manager

Enhancements of the inbuilt Dired.

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :custom
    (dired-kill-when-opening-new-dired-buffer t))

  (use-package all-the-icons-dired
    :ensure t
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode)
    :custom (all-the-icons-dired-monochrome nil))
#+END_SRC

** Container Manager

Docker integration in Emacs to manage containers and images !!

#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+END_SRC

| Key sequence | Function | Description     |
|--------------+----------+-----------------|
| ~C-c d~      | ~docker~ | Invoke ~docker~ |

** Code Versioning

Magit is an Git client embedded in Emacs. It requires ~git~ installed.

#+BEGIN_SRC sh
  apt install git
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    ("C-x p m" . magit-project-status))
#+END_SRC

| Key sequence | Function | Description    |
|--------------+----------+----------------|
| ~C-x g~      | ~magit~  | Invoke ~magit~ |

** Project management

Native ~project.el~ is used as project manager.

#+BEGIN_SRC emacs-lisp
  (use-package project
    :custom
    (project-switch-commands '((project-find-file    "Find file")
                               (consult-ripgrep      "Find regexp")
                               (project-find-dir     "Find directory")
                               (magit-project-status "Magit")
                               (eat-project          "Terminal"))))
#+END_SRC

** Completion in buffer

The completion layer is a combination of ~vertico~, ~marginalia~ and ~consult~. In addition, ~orderless~ makes the completion much matching more fluid.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t))

  (use-package marginalia
    :after vertico
    :ensure t
    :init
    (marginalia-mode))

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :ensure t
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init (all-the-icons-completion-mode))

  (use-package consult
    :ensure t
    :custom
    (consult-async-min-input 1)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    :bind
    ("C-s"     . consult-line)
    ("C-x b"   . consult-buffer)
    ("M-g g"   . consult-goto-line)
    ("M-g M-g" . consult-goto-line)
    ("C-x p b" . consult-project-buffer)
    ("C-x p g" . consult-ripgrep))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :custom
    (visual-fill-column-width 200)
    (visual-fill-column-center-text t))

  (use-package org-superstar
    :ensure t)

  (use-package org-mode
    :after visual-fill-column
    :mode ("\\.org$")
    :custom-face
    (org-level-1 ((t (:height 1.2))))
    (org-level-2 ((t (:height 1.1))))
    (org-level-3 ((t (:height 1.05))))
    (org-level-4 ((t (:height 1.0))))
    (org-level-5 ((t (:height 1.1))))
    (org-level-6 ((t (:height 1.1))))
    (org-code ((t (:inherit (shadow fixed-pitch) :height 1.2))))
    (org-block ((t (:inherit fixed-pitch :height 1.2))))
    (org-table ((t (:inherit fixed-pitch :height 1.2))))
    (org-block-begin-line ((t (:inherit (font-lock-comment-face fixed-pitch) :height 1.3 :weight bold))))
    :hook
    (org-mode . variable-pitch-mode)          ;; use variable pitch fonts by default
    (org-mode . visual-line-fill-column-mode) ;; wrap lines within the document
    (org-mode . org-indent-mode)
    (org-mode . org-superstar-mode))
#+END_SRC

Enable source code blocks evalutation for some languages:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (js . t)))
#+END_SRC

** IDE

Packages that I use to turn Emacs into a powerful IDE ! It mainly consists of Eglot + Tree-Sitter, that are now both builtin in Emacs 29, along with the language syntax packages. Because Eglot is an LSP client, it requires LSP servers to be installed and running.

#+BEGIN_SRC emacs-lisp
  ;; make sure binaries are in the `PATH` env, so LSP servers get started successfully
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (or (memq window-system '(mac ns x)) (daemonp))
      (exec-path-from-shell-initialize)))

  (defun vue-eglot-init-options ()
    (let ((tsdk-path (expand-file-name
                      "lib"
                      (string-trim-right (shell-command-to-string "npm list --global --parseable typescript | head -n1")))))
      `(:typescript (:tsdk ,tsdk-path) :vue (:hybridMode :json-false))))

  (use-package eglot
    :custom
    (indent-tabs-mode nil)
    :config
    (add-to-list 'eglot-server-programs
                 '(solidity-mode . ("nomicfoundation-solidity-language-server" "--stdio")))
    (add-to-list 'eglot-server-programs
                 `(vue-ts-mode . ("vue-language-server" "--stdio" :initializationOptions ,(vue-eglot-init-options))))
    (add-to-list 'eglot-server-programs
                 '(cairo-mode . ("scarb" "cairo-language-server"))))

  (use-package treesit-auto
    :ensure t
    :demand t
    :custom
    (treesit-auto-install t)
    :config
    (global-treesit-auto-mode))

  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode)
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-min-width 60))

  (use-package kind-icon
    :ensure t
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC

*** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-ts-mode
    :mode "\\.rs"
    :hook
    (rust-ts-mode . eglot-ensure))
#+END_SRC

*** Cairo

#+BEGIN_SRC emacs-lisp
  (define-derived-mode cairo-mode rust-ts-mode "Major mode for editing Cairo")
  (use-package cairo-mode
    :mode "\\.cairo"
    :hook
    (cairo-mode . eglot-ensure))
#+END_SRC

*** Solidity

#+BEGIN_SRC emacs-lisp
  (use-package solidity-mode
    :ensure t
    :mode "\\.sol"
    :hook
    (solidity-mode . eglot-ensure))
#+END_SRC

*** Michelson

#+BEGIN_SRC emacs-lisp
  (use-package michelson-mode
    :after quelpa-use-package
    :ensure t
    :quelpa (michelson-mode :fetcher url :url "https://gitlab.com/tezos/tezos/-/raw/master/emacs/michelson-mode.el")
    :custom
    (michelson-client-command "octez-client --mode mockup --protocol Psithaca")
    :mode "\\.tz")
#+END_SRC

- typechecking is done with Ithaca, the last version of the protocol supporting annotation propagation. cf https://gitlab.com/tezos/tezos/-/issues/3699
- depency ~deferred~ is not compatible with Emacs28 and above, and must be manually patched. cf https://github.com/kiwanami/emacs-deferred/pull/59

*** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-ts-mode
    :mode "\\.ts"
    :hook
    (typescript-ts-mode . eglot-ensure))
#+END_SRC

*** Javascript

#+BEGIN_SRC emacs-lisp
  (use-package js-mode
    :mode "\\.js"
    :hook
    (js-ts-mode . eglot-ensure))
#+END_SRC

*** Vue

#+BEGIN_SRC emacs-lisp
  (use-package vue-ts-mode
    :after quelpa-use-package
    :ensure t
    :quelpa (vue-ts-mode :fetcher url :url "https://raw.githubusercontent.com/theschmocker/vue-ts-mode/main/vue-ts-mode.el")
    :mode "\\.vue"
    :config
    (put 'vue-ts-mode 'eglot-language-id "vue")
    :hook
    (vue-ts-mode . eglot-ensure))
#+END_SRC

*** ESLint support

#+BEGIN_SRC emacs-lisp
  (use-package eslint-rc
    :ensure t
    :custom
    (eslint-rc-use-eslintignore nil)
    :hook
    ((js-ts-mode . eslint-rc-mode) (typescript-ts-mode . eslint-rc-mode) (vue-ts-mode . eslint-rc-mode)))
#+END_SRC

*** JSON

#+BEGIN_SRC emacs-lisp
  (use-package json-ts-mode
    :mode ("\\.json" "\\.eslintrc")
    :hook
    (json-ts-mode . eglot-ensure))
#+END_SRC

*** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-ts-mode
    :mode ("\\.yaml" "\\.yml")
    :hook
    (yaml-ts-mode . eglot-ensure))
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md"
    :custom-face
    (markdown-pre-face ((t (:inherit org-block))))
    (markdown-inline-code-face ((t (:inherit org-code))))
    (markdown-url-face ((t (:inherit org-link))))
    (markdown-table-face ((t (:inherit org-table))))
    (markdown-header-face-1 ((t (:inherit org-level-1))))
    (markdown-header-face-2 ((t (:inherit org-level-2))))
    (markdown-header-face-3 ((t (:inherit org-level-3))))
    (markdown-header-face-4 ((t (:inherit org-level-4))))
    (markdown-header-face-5 ((t (:inherit org-level-5))))
    (markdown-header-face-6 ((t (:inherit org-level-6))))
    :hook
    (markdown-mode . variable-pitch-mode)          ;; use variable pitch fonts by default
    (markdown-mode . visual-line-fill-column-mode) ;; wrap lines within the document
    (markdown-mode . eglot-ensure))
#+END_SRC

*** Java

#+BEGIN_SRC emacs-lisp
  (use-package java-ts-mode
    :mode "\\.java"
    :hook
    (java-ts-mode . eglot-ensure))
#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
  (use-package python-ts-mode
    :mode "\\.py"
    :hook
    (python-ts-mode . eglot-ensure))
#+END_SRC

*** C

#+BEGIN_SRC emacs-lisp
  (use-package c-ts-mode
    :mode ("\\.c$" "\\.h$")
    :hook
    (c-ts-mode . eglot-ensure))
#+END_SRC

*** C++

#+BEGIN_SRC emacs-lisp
  (use-package c++-ts-mode
    :mode ("\\.cpp$" "\\.hpp$")
    :hook
    (c++-ts-mode . eglot-ensure))
#+END_SRC

** Miscellaneous

Here are some configurations that do not fit in any particular sections.

- Highlight the line at point if buffer is readonly

#+BEGIN_SRC emacs-lisp
  (defun ht/highlight-if-read-only ()
    "Highlight the current line if buffer is read only"
    (interactive)
    (hl-line-mode (if buffer-read-only 1 -1)))
  (add-hook 'read-only-mode-hook 'ht/highlight-if-read-only)
#+END_SRC

- Enable repeat mode

#+BEGIN_SRC emacs-lisp
  (repeat-mode 1)
#+END_SRC

- Enable multiple cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t)
#+END_SRC

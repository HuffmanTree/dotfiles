* Emacs config

** Basic

Some very basic settings that tweak the UI.

#+BEGIN_SRC emacs-lisp
  (column-number-mode)            ;; column number display in the mode line
  (menu-bar-mode -1)              ;; no menu bar
  (scroll-bar-mode -1)            ;; no scroll bar
  (tool-bar-mode -1)              ;; no tool bar
  (setq inhibit-startup-screen t) ;; no startup screen
  (fringe-mode 4)                 ;; 4px padding on each frame
#+END_SRC

** Package Manager

Native ~use-package~ is used as package manager.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

Automatically update packages every 7 days, and delete old versions.

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :custom 
    (auto-package-update-interval 7)            ;; period between updates is 7 days
    (auto-package-update-delete-old-versions t) ;; old versions of updated packages are removed
    :config
    (auto-package-update-maybe))                ;; updates are automatically made according to the interval
#+END_SRC

** Documentation

Default ~*Help*~ buffer is quite poor and gets enriched using ~helpful~.

| Key sequence | Function           | Description                                                     |
|--------------+--------------------+-----------------------------------------------------------------|
| ~C-h v~      | ~helpful-variable~ | Show documentation of a variable                                |
| ~C-h f~      | ~helpful-function~ | Show documentation of a function                                |
| ~C-h k~      | ~helpful-key~      | Show documentation of a function associated with a key sequence |

#+BEGIN_SRC emacs-lisp
  (setq eldoc-echo-area-prefer-doc-buffer t) ;; documentation is displayed in ElDoc buffer, if available

  (use-package helpful
    :ensure t
    :bind
    ("C-h v" . helpful-variable)
    ("C-h f" . helpful-function)
    ("C-h s" . helpful-symbol)
    ("C-h k" . helpful-key))
#+END_SRC

** Shell

Emacs comes with a shell emulator ~eshell~.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (or (memq window-system '(mac ns x)) (daemonp))
      (exec-path-from-shell-initialize)))
#+END_SRC

** Key Completion

Package ~which-key~ displays key sequence completion of an already typed prefix.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    :custom
    (which-key-popup-type 'minibuffer))
#+END_SRC

** Theme & Fonts

Custom theme and fonts. Note that fonts must be installed at the system level before Emacs can use them.

#+BEGIN_SRC sh
  apt install fonts-dejavu
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :config (modus-themes-select 'modus-operandi-tinted))

  (set-face-attribute 'default nil :font "DejaVu Sans Mono-8")

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p)
    :init
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter))
#+END_SRC

** File Manager

Enhancements of the inbuilt Dired.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode)
    :custom (all-the-icons-dired-monochrome nil))
#+END_SRC

** Code Versioning

Magit is an Git client embedded in Emacs. It requires ~git~ installed.

#+BEGIN_SRC sh
  apt install git
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+END_SRC

| Key sequence | Function | Description    |
|--------------+----------+----------------|
| ~C-x g~      | ~magit~  | Invoke ~magit~ |


** Completion in buffer

The completion layer is a combination of ~vertico~, ~marginalia~ and ~consult~. In addition, ~orderless~ makes the completion much matching more fluid.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t))

  (use-package marginalia
    :after vertico
    :ensure t
    :init
    (marginalia-mode))

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :ensure t
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init (all-the-icons-completion-mode))

  (use-package consult
    :ensure t
    :custom
    (consult-async-min-input 1)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    :bind
    ("C-s"     . consult-line)
    ("C-x b"   . consult-buffer)
    ("M-g g"   . consult-goto-line)
    ("M-g M-g" . consult-goto-line)
    ("C-x p b" . consult-project-buffer))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** IDE

Packages that I use to turn Emacs into a powerful IDE ! It mainly consists of Eglot + Tree-Sitter, that are now both builtin in Emacs 29, along with the language syntax packages. Because Eglot is an LSP client, it requires LSP servers to be installed and running.

#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :custom
    (indent-tabs-mode nil))

  (use-package treesit-auto
    :ensure t
    :demand t
    :custom
    (treesit-auto-install t)
    :config
    (global-treesit-auto-mode))

  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode)
    :custom
    (corfu-cycle t)
    (corfu-auto t))
#+END_SRC

*** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-ts-mode
    :mode "\\.rs"
    :hook
    (rust-ts-mode . eglot-ensure))
#+END_SRC

*** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-ts-mode
    :mode "\\.ts"
    :hook
    (typescript-ts-mode . eglot-ensure))
#+END_SRC

*** Javascript

#+BEGIN_SRC emacs-lisp
  (use-package js-mode
    :mode "\\.js"
    :hook
    (js-ts-mode . eglot-ensure))
#+END_SRC

*** ESLint support

#+BEGIN_SRC emacs-lisp
  (use-package eslint-rc
    :ensure t
    :custom
    (eslint-rc-use-eslintignore nil)
    :hook
    ((js-ts-mode . eslint-rc-mode) (typescript-ts-mode . eslint-rc-mode)))
#+END_SRC

*** JSON

#+BEGIN_SRC emacs-lisp
  (use-package json-ts-mode
    :mode ("\\.json" "\\.eslintrc")
    :hook
    (json-ts-mode . eglot-ensure))
#+END_SRC

*** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-ts-mode
    :mode ("\\.yaml" "\\.yml")
    :hook
    (yaml-ts-mode . eglot-ensure))
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md"
    :hook
    (markdown-ts-mode . eglot-ensure))
#+END_SRC

*** Java

#+BEGIN_SRC emacs-lisp
  (use-package java-ts-mode
    :mode "\\.java"
    :hook
    (java-ts-mode . eglot-ensure))
#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
  (use-package python-ts-mode
    :mode "\\.py"
    :hook
    (python-ts-mode . eglot-ensure))
#+END_SRC

*** C

#+BEGIN_SRC emacs-lisp
  (use-package c-ts-mode
    :mode ("\\.c$" "\\.h$")
    :hook
    (c-ts-mode . eglot-ensure))
#+END_SRC

*** C++

#+BEGIN_SRC emacs-lisp
  (use-package c++-ts-mode
    :mode ("\\.cpp$" "\\.hpp$")
    :hook
    (c++-ts-mode . eglot-ensure))
#+END_SRC
